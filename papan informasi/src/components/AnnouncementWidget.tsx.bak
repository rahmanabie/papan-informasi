import React, { useState, useEffect, useRef } from 'react';
import { Megaphone, Plus, Edit, X, Calendar, Settings, Save, Trash, Copy, Clock, MapPin, FileText } from 'lucide-react';

interface AnnouncementWidgetProps {
  showControls?: boolean;
}

interface Announcement {
  id: number;
  day: string;
  time: string;
  title: string;
  location: string;
  notes: string;
  color?: string;
  priority?: number;
  status?: 'upcoming' | 'ongoing' | 'completed' | 'cancelled';
  participants?: string;
  organizer?: string;
  contactPerson?: string;
  contactNumber?: string;
}

const defaultAnnouncements: Announcement[] = [
  {
    id: 1,
    day: 'SENIN',
    time: '09.00 WIB s.d Selesai',
    title: 'Rapat Koordinasi Bulanan Seluruh Pegawai',
    location: 'Aula Utama Lantai 3',
    notes: 'Harap membawa laporan bulanan masing-masing divisi',
    color: '#4CAF50',
    priority: 1,
    status: 'upcoming',
    participants: 'Seluruh Pegawai',
    organizer: 'Bagian Kepegawaian',
    contactPerson: 'Bpk. Ahmad',
    contactNumber: '081234567890'
  },
  {
    id: 2,
    day: 'SELASA',
    time: '13.00 WIB s.d 15.00 WIB',
    title: 'Workshop Pengembangan Sistem Informasi',
    location: 'Ruang Pelatihan Komputer',
    notes: 'Peserta diharapkan membawa laptop',
    color: '#2196F3',
    priority: 2,
    status: 'upcoming',
    participants: 'Tim IT dan Perwakilan Divisi',
    organizer: 'Divisi IT',
    contactPerson: 'Ibu Siti',
    contactNumber: '081234567891'
  },
  {
    id: 3,
    day: 'JUMAT',
    time: '14.00 WIB s.d Selesai',
    title: 'Buka Puasa Bersama, Santunan Yatim & Dhu\'afa dan Pembagian Takjil Berbuka Puasa',
    location: 'Kantor Kementerian Agama Kota Tangerang Selatan',
    notes: '',
    color: '#FF9800',
    priority: 1,
    status: 'upcoming',
    participants: 'Seluruh Pegawai dan Undangan',
    organizer: 'Panitia Ramadhan',
    contactPerson: 'Bpk. Rahmat',
    contactNumber: '081234567892'
  },
  {
    id: 4,
    day: 'KAMIS',
    time: '10.00 WIB s.d 12.00 WIB',
    title: 'Sosialisasi Kebijakan Baru',
    location: 'Ruang Rapat Utama',
    notes: 'Wajib dihadiri oleh seluruh kepala bagian',
    color: '#F44336',
    priority: 1,
    status: 'upcoming',
    participants: 'Seluruh Kepala Bagian',
    organizer: 'Sekretariat',
    contactPerson: 'Ibu Ani',
    contactNumber: '081234567893'
  }
];

const AnnouncementWidget: React.FC<AnnouncementWidgetProps> = ({ showControls }) => {
  const [announcements, setAnnouncements] = useState<Announcement[]>(() => {
    const savedAnnouncements = localStorage.getItem('infoboard-announcements');
    return savedAnnouncements ? JSON.parse(savedAnnouncements) : defaultAnnouncements;
  });
  
  const [showEditForm, setShowEditForm] = useState(false);
  const [editingAnnouncement, setEditingAnnouncement] = useState<Announcement | null>(null);
  const [selectedAnnouncementId, setSelectedAnnouncementId] = useState<number | null>(null);
  const [activeTab, setActiveTab] = useState<'basic' | 'advanced' | 'participants'>('basic');
  const [inlineEditMode, setInlineEditMode] = useState(false);
  const [quickEditAnnouncement, setQuickEditAnnouncement] = useState<Announcement | null>(null);
  const scrollRef = useRef<HTMLDivElement>(null);
  
  // For auto-scrolling effect
  useEffect(() => {
    const scrollInterval = setInterval(() => {
      if (scrollRef.current) {
        const scrollHeight = scrollRef.current.scrollHeight;
        const currentScroll = scrollRef.current.scrollTop;
        const clientHeight = scrollRef.current.clientHeight;
        
        // If we're at the bottom, go back to top
        if (currentScroll + clientHeight >= scrollHeight - 10) {
          scrollRef.current.scrollTop = 0;
        } else {
          // Otherwise scroll down a bit
          scrollRef.current.scrollTop += 1;
        }
      }
    }, 50);
    
    return () => clearInterval(scrollInterval);
  }, []);

  useEffect(() => {
    localStorage.setItem('infoboard-announcements', JSON.stringify(announcements));
  }, [announcements]);
  
  const handleEditAnnouncement = (announcement: Announcement) => {
    setEditingAnnouncement({...announcement});
    setShowEditForm(true);
  };
  
  const handleAddAnnouncement = () => {
    const newAnnouncement: Announcement = {
      id: Date.now(),
      day: '',
      time: '',
      title: '',
      location: '',
      notes: '',
      color: '#4CAF50',
      priority: 2,
      status: 'upcoming',
      participants: '',
      organizer: '',
      contactPerson: '',
      contactNumber: ''
    };
    setEditingAnnouncement(newAnnouncement);
    setShowEditForm(true);
    setActiveTab('basic');
  };
  
  const handleSaveAnnouncement = (e: React.FormEvent) => {
    e.preventDefault();
    if (editingAnnouncement && editingAnnouncement.title.trim()) {
      if (announcements.some(a => a.id === editingAnnouncement.id)) {
        // Update existing announcement
        setAnnouncements(announcements.map(a => 
          a.id === editingAnnouncement.id ? editingAnnouncement : a
        ));
      } else {
        // Add new announcement
        setAnnouncements([...announcements, editingAnnouncement]);
      }
      setEditingAnnouncement(null);
      setShowEditForm(false);
    }
  };

  const handleDeleteAnnouncement = (id: number) => {
    setAnnouncements(announcements.filter(a => a.id !== id));
    if (editingAnnouncement?.id === id) {
      setEditingAnnouncement(null);
      setShowEditForm(false);
    }
  };
  
  return (
    <div className="rounded-xl shadow-lg overflow-hidden h-full flex flex-col text-sm">
      {/* Instructions for selecting an item */}
      {showControls && !selectedAnnouncementId && (
        <div className="absolute top-2 left-2 z-10 bg-yellow-100 text-yellow-800 text-xs p-1.5 rounded shadow-sm">
          Klik pada pengumuman untuk mengedit
        </div>
      )}
      
      <div className="flex-1 relative overflow-hidden">
        {showEditForm ? (
          <div className="absolute inset-0 bg-white/90 backdrop-blur-sm flex items-center justify-center p-1 sm:p-1 z-20">
            {editingAnnouncement && (
              <form onSubmit={handleSaveAnnouncement} className="w-full max-w-4xl bg-white rounded-lg shadow-lg text-sm">
                <div className="p-2 bg-gray-50 border-b flex justify-between items-center">
                  <h3 className="text-xs font-semibold text-gray-800">Edit Agenda Kegiatan</h3>
                  <button 
                    type="button"
                    onClick={() => {
                      setEditingAnnouncement(null);
                      setShowEditForm(false);
                    }}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
                
                {/* Tabs */}
                <div className="flex border-b bg-gray-50">
                  <button
                    type="button"
                    className={`px-3 py-1 ${activeTab === 'basic' ? 'bg-white border-b-2 border-green-500 text-green-600' : 'text-gray-600 hover:text-gray-800'}`}
                    onClick={() => setActiveTab('basic')}
                  >
                    Informasi Dasar
                  </button>
                  <button
                    type="button"
                    className={`px-3 py-1 ${activeTab === 'advanced' ? 'bg-white border-b-2 border-green-500 text-green-600' : 'text-gray-600 hover:text-gray-800'}`}
                    onClick={() => setActiveTab('advanced')}
                  >
                    Pengaturan Lanjutan
                  </button>
                  <button
                    type="button"
                    className={`px-3 py-1 ${activeTab === 'participants' ? 'bg-white border-b-2 border-green-500 text-green-600' : 'text-gray-600 hover:text-gray-800'}`}
                    onClick={() => setActiveTab('participants')}
                  >
                    Peserta & Kontak
                  </button>
                </div>
                
                <div className="p-4 space-y-4">
                  {/* Basic Information Tab */}
                  {activeTab === 'basic' && (
                    <div className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                        <div>
                          <label className="block text-xs font-medium text-gray-700 mb-1">
                            <Calendar className="inline-block w-4 h-4 mr-1" /> Hari
                          </label>
                          <input
                            type="text"
                            className="w-full p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500"
                            value={editingAnnouncement.day}
                            onChange={(e) => setEditingAnnouncement({...editingAnnouncement, day: e.target.value})}
                          />
                        </div>
                        <div>
                          <label className="block text-xs font-medium text-gray-700 mb-1">
                            <Clock className="inline-block w-4 h-4 mr-1" /> Waktu
                          </label>
                          <input
                            type="text"
                            className="w-full p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500"
                            value={editingAnnouncement.time}
                            onChange={(e) => setEditingAnnouncement({...editingAnnouncement, time: e.target.value})}
                          />
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          <FileText className="inline-block w-4 h-4 mr-1" /> Judul
                        </label>
                        <textarea
                          className="w-full p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500"
                          value={editingAnnouncement.title}
                          onChange={(e) => setEditingAnnouncement({...editingAnnouncement, title: e.target.value})}
                          rows={2}
                        />
                      </div>
                      
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          <MapPin className="inline-block w-4 h-4 mr-1" /> Lokasi
                        </label>
                        <input
                          type="text"
                          className="w-full p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500"
                          value={editingAnnouncement.location}
                          onChange={(e) => setEditingAnnouncement({...editingAnnouncement, location: e.target.value})}
                        />
                      </div>
                      
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          <FileText className="inline-block w-4 h-4 mr-1" /> Keterangan
                        </label>
                        <textarea
                          className="w-full p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500"
                          value={editingAnnouncement.notes}
                          onChange={(e) => setEditingAnnouncement({...editingAnnouncement, notes: e.target.value})}
                          rows={3}
                        />
                      </div>
                    </div>
                  )}
                  
                  {/* Advanced Settings Tab */}
                  {activeTab === 'advanced' && (
                    <div className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                        <div>
                          <label className="block text-xs font-medium text-gray-700 mb-1">
                            Warna Label
                          </label>
                          <div className="flex items-center space-x-2">
                            <input
                              type="color"
                              className="w-10 h-10 rounded border border-gray-300"
                              value={editingAnnouncement.color || '#4CAF50'}
                              onChange={(e) => setEditingAnnouncement({...editingAnnouncement, color: e.target.value})}
                            />
                            <input
                              type="text"
                              className="flex-1 p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500"
                              value={editingAnnouncement.color || '#4CAF50'}
                              onChange={(e) => setEditingAnnouncement({...editingAnnouncement, color: e.target.value})}
                            />
                          </div>
                        </div>
                        
                        <div>
                          <label className="block text-xs font-medium text-gray-700 mb-1">
                            Prioritas
                          </label>
                          <select
                            className="w-full p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500"
                            value={editingAnnouncement.priority || 2}
                            onChange={(e) => setEditingAnnouncement({...editingAnnouncement, priority: parseInt(e.target.value)})}
                          >
                            <option value={1}>Tinggi</option>
                            <option value={2}>Sedang</option>
                            <option value={3}>Rendah</option>
                          </select>
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          Status
                        </label>
                        <select
                          className="w-full p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500"
                          value={editingAnnouncement.status || 'upcoming'}
                          onChange={(e) => setEditingAnnouncement({...editingAnnouncement, status: e.target.value as any})}
                        >
                          <option value="upcoming">Akan Datang</option>
                          <option value="ongoing">Sedang Berlangsung</option>
                          <option value="completed">Selesai</option>
                          <option value="cancelled">Dibatalkan</option>
                        </select>
                      </div>
                      
                      <div className="border-t pt-4">
                        <div className="flex items-center justify-between">
                          <h4 className="font-medium text-gray-700">Opsi Tampilan</h4>
                          <div className="flex space-x-2">
                            <button
                              type="button"
                              className="px-3 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600"
                              onClick={() => {
                                // Duplicate announcement
                                const newAnnouncement = {
                                  ...editingAnnouncement,
                                  id: Date.now(),
                                  title: `${editingAnnouncement.title} (Copy)`
                                };
                                setAnnouncements([...announcements, newAnnouncement]);
                              }}
                            >
                              <Copy className="w-4 h-4 inline-block mr-1" /> Duplikat
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {/* Participants Tab */}
                  {activeTab === 'participants' && (
                    <div className="space-y-4">
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          Peserta
                        </label>
                        <textarea
                          className="w-full p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500"
                          value={editingAnnouncement.participants || ''}
                          onChange={(e) => setEditingAnnouncement({...editingAnnouncement, participants: e.target.value})}
                          rows={2}
                          placeholder="Daftar peserta yang diharapkan hadir"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          Penyelenggara
                        </label>
                        <input
                          type="text"
                          className="w-full p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500"
                          value={editingAnnouncement.organizer || ''}
                          onChange={(e) => setEditingAnnouncement({...editingAnnouncement, organizer: e.target.value})}
                          placeholder="Divisi/bagian penyelenggara"
                        />
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                        <div>
                          <label className="block text-xs font-medium text-gray-700 mb-1">
                            Narahubung
                          </label>
                          <input
                            type="text"
                            className="w-full p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500"
                            value={editingAnnouncement.contactPerson || ''}
                            onChange={(e) => setEditingAnnouncement({...editingAnnouncement, contactPerson: e.target.value})}
                            placeholder="Nama kontak person"
                          />
                        </div>
                        
                        <div>
                          <label className="block text-xs font-medium text-gray-700 mb-1">
                            Nomor Kontak
                          </label>
                          <input
                            type="text"
                            className="w-full p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500"
                            value={editingAnnouncement.contactNumber || ''}
                            onChange={(e) => setEditingAnnouncement({...editingAnnouncement, contactNumber: e.target.value})}
                            placeholder="Nomor telepon yang bisa dihubungi"
                          />
                        </div>
                      </div>
                    </div>
                  )}
                </div>
                
                <div className="border-t p-2 flex justify-between items-center bg-gray-50">
                  <div>
                    <button 
                      type="button"
                      onClick={() => {
                        if (window.confirm('Hapus agenda kegiatan ini?')) {
                          handleDeleteAnnouncement(editingAnnouncement.id);
                        }
                      }}
                      className="px-3 py-1 bg-red-500 text-white rounded-md hover:bg-red-600 flex items-center"
                    >
                      <Trash className="w-4 h-4 mr-1" /> Hapus
                    </button>
                  </div>
                  
                  <div className="flex space-x-2">
                    <button 
                      type="button"
                      onClick={() => {
                        setEditingAnnouncement(null);
                        setShowEditForm(false);
                      }}
                      className="px-3 py-1 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 flex items-center"
                    >
                      <X className="w-4 h-4 mr-1" /> Batal
                    </button>
                    <button 
                      type="submit"
                      className="px-3 py-1 bg-green-500 text-white rounded-md hover:bg-green-600 flex items-center"
                    >
                      <Save className="w-4 h-4 mr-1" /> Simpan
                    </button>
                  </div>
                </div>
              </form>
            )}
          </div>
        ) : (
          <div className="flex-1 overflow-hidden">
            <div 
              ref={scrollRef}
              className="h-full overflow-y-auto" 
              style={{ scrollBehavior: 'smooth' }}
            >
              {announcements.map((announcement) => (
                <div 
                  key={announcement.id}
                  className={`mb-2 cursor-pointer relative ${selectedAnnouncementId === announcement.id ? 'ring-1 ring-green-500' : ''}`}
                  onClick={() => setSelectedAnnouncementId(announcement.id)}
                >
                  {/* Quick edit controls */}
                  {inlineEditMode && (
                    <div className="absolute -right-1 -top-1 flex space-x-0.5 z-10">
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          setQuickEditAnnouncement({...announcement});
                        }}
                        className="bg-blue-500 text-white p-0.5 rounded-full hover:bg-blue-600 transition shadow-md"
                        title="Edit Cepat"
                      >
                        <Edit className="w-3 h-3" />
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          if (window.confirm('Hapus agenda ini?')) {
                            handleDeleteAnnouncement(announcement.id);
                          }
                        }}
                        className="bg-red-500 text-white p-0.5 rounded-full hover:bg-red-600 transition shadow-md"
                        title="Hapus"
                      >
                        <Trash className="w-3 h-3" />
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          // Duplicate announcement
                          const newAnnouncement = {
                            ...announcement,
                            id: Date.now(),
                            title: `${announcement.title} (Copy)`
                          };
                          setAnnouncements([...announcements, newAnnouncement]);
                        }}
                        className="bg-green-500 text-white p-0.5 rounded-full hover:bg-green-600 transition shadow-md"
                        title="Duplikat"
                      >
                        <Copy className="w-3 h-3" />
                      </button>
                    </div>
                  )}
                  
                  {/* Quick edit form */}
                  {quickEditAnnouncement && quickEditAnnouncement.id === announcement.id ? (
                    <div className="p-2 border border-blue-500 rounded-lg bg-white shadow-lg">
                      <div className="flex justify-between items-center mb-1.5">
                        <h3 className="font-semibold text-blue-600 text-xs">Edit Cepat</h3>
                        <div className="flex space-x-1">
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              // Save changes
                              setAnnouncements(announcements.map(a => 
                                a.id === quickEditAnnouncement.id ? quickEditAnnouncement : a
                              ));
                              setQuickEditAnnouncement(null);
                            }}
                            className="bg-green-500 text-white p-0.5 rounded hover:bg-green-600 transition flex items-center text-xs"
                          >
                            <Save className="w-2.5 h-2.5 mr-0.5" /> Simpan
                          </button>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              setQuickEditAnnouncement(null);
                            }}
                            className="bg-gray-500 text-white p-0.5 rounded hover:bg-gray-600 transition flex items-center text-xs"
                          >
                            <X className="w-2.5 h-2.5 mr-0.5" /> Batal
                          </button>
                        </div>
                      </div>
                      <div className="space-y-1.5">
                        <div className="grid grid-cols-2 gap-2">
                          <div>
                            <label className="block text-xs font-medium text-gray-700">Hari</label>
                            <input
                              type="text"
                              className="w-full p-1 text-sm border border-gray-300 rounded"
                              value={quickEditAnnouncement.day}
                              onChange={(e) => setQuickEditAnnouncement({...quickEditAnnouncement, day: e.target.value})}
                              onClick={(e) => e.stopPropagation()}
                            />
                          </div>
                          <div>
                            <label className="block text-xs font-medium text-gray-700">Jam</label>
                            <input
                              type="text"
                              className="w-full p-1 text-sm border border-gray-300 rounded"
                              value={quickEditAnnouncement.time}
                              onChange={(e) => setQuickEditAnnouncement({...quickEditAnnouncement, time: e.target.value})}
                              onClick={(e) => e.stopPropagation()}
                            />
                          </div>
                        </div>
                        <div>
                          <label className="block text-xs font-medium text-gray-700">Judul</label>
                          <textarea
                            className="w-full p-1 text-sm border border-gray-300 rounded"
                            value={quickEditAnnouncement.title}
                            onChange={(e) => setQuickEditAnnouncement({...quickEditAnnouncement, title: e.target.value})}
                            rows={2}
                            onClick={(e) => e.stopPropagation()}
                          />
                        </div>
                        <div>
                          <label className="block text-xs font-medium text-gray-700">Lokasi</label>
                          <input
                            type="text"
                            className="w-full p-1 text-sm border border-gray-300 rounded"
                            value={quickEditAnnouncement.location}
                            onChange={(e) => setQuickEditAnnouncement({...quickEditAnnouncement, location: e.target.value})}
                            onClick={(e) => e.stopPropagation()}
                          />
                        </div>
                        <div>
                          <label className="block text-xs font-medium text-gray-700">Keterangan</label>
                          <textarea
                            className="w-full p-1 text-sm border border-gray-300 rounded"
                            value={quickEditAnnouncement.notes}
                            onChange={(e) => setQuickEditAnnouncement({...quickEditAnnouncement, notes: e.target.value})}
                            rows={2}
                            onClick={(e) => e.stopPropagation()}
                          />
                        </div>
                      </div>
                    </div>
                  ) : (
                    <table 
                      style={{fontSize: '14px', wordWrap: 'break-word'}} 
                      cellPadding="2" cellSpacing="2"
                      className="w-full border-collapse"
                    >
                      <tbody>
                        <tr>
                          <td colSpan={3} align="center" valign="middle">
                            <Calendar className="inline-block mr-1 w-4 h-4" />
                            <b>{announcement.day}</b>
                          </td>
                        </tr>
                        <tr style={{ height: '30px' }}>
                          <td width="18%" valign="top"><b>Jam</b></td>
                          <td width="3%" valign="top">:</td>
                          <td width="79%" valign="top">{announcement.time}</td>
                        </tr>
                        <tr style={{ height: '30px' }}>
                          <td valign="top" className="bg-gray-200"><b>Judul</b></td>
                          <td valign="top" className="bg-gray-200">:</td>
                          <td valign="top" className="bg-gray-200" style={{wordWrap: 'break-word'}}>
                            {announcement.title}
                          </td>
                        </tr>
                        <tr style={{ height: '30px' }}>
                          <td valign="top"><b>Lokasi</b></td>
                          <td valign="top">:</td>
                          <td valign="top" style={{wordWrap: 'break-word'}}>{announcement.location}</td>
                        </tr>
                        {announcement.notes && (
                          <tr style={{ height: '30px' }}>
                            <td valign="top" className="bg-gray-200"><b>Keterangan</b></td>
                            <td valign="top" className="bg-gray-200">:</td>
                            <td valign="top" className="bg-gray-200" style={{wordWrap: 'break-word'}}>
                          </tr>
                          <tr style={{ height: '30px' }}>
                            <td valign="top" className="bg-gray-200"><b>Judul</b></td>
                            <td valign="top" className="bg-gray-200">:</td>
                            <td valign="top" className="bg-gray-200" style={{wordWrap: 'break-word'}}>
                              {announcement.title}
                            </td>
                          </tr>
                          <tr style={{ height: '30px' }}>
                            <td valign="top"><b>Lokasi</b></td>
                            <td valign="top">:</td>
                            <td valign="top" style={{wordWrap: 'break-word'}}>{announcement.location}</td>
                          </tr>
                          {announcement.notes && (
                            <tr style={{ height: '30px' }}>
                              <td valign="top" className="bg-gray-200"><b>Keterangan</b></td>
                              <td valign="top" className="bg-gray-200">:</td>
                              <td valign="top" className="bg-gray-200" style={{wordWrap: 'break-word'}}>
                                {announcement.notes}
                              </td>
                            </tr>
                          )}
                        </tbody>
                      </table>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AnnouncementWidget;
